.
 .git
  COMMIT_EDITMSG
  config
  description
  HEAD
  hooks
   applypatch-msg.sample
   commit-msg.sample
   fsmonitor-watchman.sample
   post-update.sample
   pre-applypatch.sample
   pre-commit.sample
   pre-merge-commit.sample
   pre-push.sample
   pre-rebase.sample
   pre-receive.sample
   prepare-commit-msg.sample
   push-to-checkout.sample
   sendemail-validate.sample
   update.sample
  index
  info
   exclude
  logs
   HEAD
   refs
    heads
     main
    remotes
     origin
      main
  objects
   40
    ecef791147ae261095d1e648f888ec7361302c
   50
    123d97c83ad9c021204bfeb599c34563e8a8ef
   59
    5d8358444a75f60c79d9dcd0329891806ec2d4
   5d
    11665575c6c0f497b014db29ce6ddefc21534a
   96
    101a6af7b1e0ef8574e939123572a5ab456d7c
   be
    a8bbcab786a0a82315ec721d698bf9bcb9b7da
   db
    36f3480081b1b570dd6a968979064ae1ea3a3d
   dd
    892f164f7920355a6fbbbae7ef37a4d71d62d7
   e6
    9de29bb2d1d6434b8b29ae775ad8c2e48c5391
    bcca340e60bddd5df8e94a9278e1e42fbf14eb
   e8
    8a1d389e33b366948f99837244564ecd1d0579
   info
   pack
  refs
   heads
    main
   remotes
    origin
     main
   tags
 .gitignore
 cygwin1.dll
 domain
  domain.pddl
  domain_metric.pddl
 dump.txt
 ff.exe
 metricff.exe
 problems
  basic
   menu-test1.pddl
  ext1
  ext2
  ext3
  ext4
  ext5
 README.md
 scripts
  dump.txt
  dump_project.sh
  generator
  run


========================================

----- domain/domain.pddl -----
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  WEEKLY-MENU ― BASIC DOMAIN  (ext.0-3)
;;  – No numeric fluents –                                       
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (domain weekly-menu)
  (:requirements :adl :typing :equality)

  ;;-------------------------------------------------------------------
  ;;  TYPES
  ;;-------------------------------------------------------------------
  (:types
      dia                ; working days (mon … fri)
      tipo               ; dish class: pescado, carne, sopa, …
      plato
      primer  - plato    ; first courses
      segundo - plato    ; second courses
  )

  ;;-------------------------------------------------------------------
  ;;  PREDICATES
  ;;-------------------------------------------------------------------
  (:predicates
      ;; —— static knowledge ——
      (dish-type        ?p - plato  ?t - tipo)
      (incompatible     ?p - primer ?s - segundo)
      (next-day         ?d - dia    ?d2 - dia)      ; total order

      ;; —— dynamic state ——
      (current-day      ?d - dia)
      (needs-first      ?d - dia)
      (needs-second     ?d - dia)

      (assigned-first   ?d - dia ?p - primer)
      (assigned-second  ?d - dia ?s - segundo)
      (used             ?pl - plato)                ; ext-1

      (prev-first-type  ?t - tipo)                  ; ext-2
      (prev-second-type ?t - tipo)

      ;; forced dishes (ext-3)
      (require-first    ?d - dia ?p - primer)
      (require-second   ?d - dia ?s - segundo)

      (planning-done)
  )

  ;;-------------------------------------------------------------------
  ;;  ACTIONS
  ;;-------------------------------------------------------------------

  ;; ────────────────────────────────────────────────────────────────
  ;;  CHOOSE FIRST — no forced dish on the day
  ;; ────────────────────────────────────────────────────────────────
  (:action choose-first-free
    :parameters (?p  - primer
                 ?d  - dia
                 ?t  - tipo       ; type of candidate dish
                 ?tp - tipo)      ; type used the previous day
    :precondition (and
        (current-day ?d)
        (needs-first ?d)
        (dish-type ?p ?t)
        (prev-first-type ?tp)          ; value for “yesterday”
        (not (= ?t ?tp))               ; ext-2: no repetition of type
        (not (used ?p))                ; ext-1
        ;; no requirement present
        (forall (?r - primer) (not (require-first ?d ?r)))
    )
    :effect (and
        (assigned-first ?d ?p)
        (not (needs-first ?d))
        (needs-second ?d)
        (used ?p)
    )
  )

  ;; ────────────────────────────────────────────────────────────────
  ;;  CHOOSE FIRST — forced dish variant  (ext-3)
  ;; ────────────────────────────────────────────────────────────────
  (:action choose-first-required
    :parameters (?p  - primer
                 ?d  - dia
                 ?t  - tipo
                 ?tp - tipo)
    :precondition (and
        (current-day ?d) (needs-first ?d)
        (dish-type ?p ?t)
        (prev-first-type ?tp) (not (= ?t ?tp))
        (not (used ?p))
        (require-first ?d ?p)
    )
    :effect (and
        (assigned-first ?d ?p)
        (not (needs-first ?d))
        (needs-second ?d)
        (used ?p)
    )
  )

  ;; ────────────────────────────────────────────────────────────────
  ;;  CHOOSE SECOND — no forced dish
  ;; ────────────────────────────────────────────────────────────────
  (:action choose-second-free
    :parameters (?s  - segundo
                 ?d  - dia
                 ?pf - primer)        ; already chosen first
    :precondition (and
        (current-day ?d) (needs-second ?d)
        (assigned-first ?d ?pf)
        (not (incompatible ?pf ?s))
        (not (used ?s))
        (forall (?r - segundo) (not (require-second ?d ?r)))
    )
    :effect (and
        (assigned-second ?d ?s)
        (not (needs-second ?d))
        (used ?s)
    )
  )

  ;; ────────────────────────────────────────────────────────────────
  ;;  CHOOSE SECOND — forced dish  (ext-3)
  ;; ────────────────────────────────────────────────────────────────
  (:action choose-second-required
    :parameters (?s  - segundo
                 ?d  - dia
                 ?pf - primer)
    :precondition (and
        (current-day ?d) (needs-second ?d)
        (assigned-first ?d ?pf)
        (not (incompatible ?pf ?s))
        (not (used ?s))
        (require-second ?d ?s)
    )
    :effect (and
        (assigned-second ?d ?s)
        (not (needs-second ?d))
        (used ?s)
    )
  )

  ;; ────────────────────────────────────────────────────────────────
  ;;  CLOSE A DAY (Mon-Thu)
  ;; ────────────────────────────────────────────────────────────────
  (:action finalize-day
    :parameters (?d   - dia
                 ?dn  - dia
                 ?pf  - primer
                 ?ps  - segundo
                 ?tf  - tipo
                 ?ts  - tipo)
    :precondition (and
        (current-day ?d)
        (assigned-first ?d ?pf)  (dish-type ?pf ?tf)
        (assigned-second ?d ?ps) (dish-type ?ps ?ts)
        (next-day ?d ?dn)
    )
    :effect (and
        ;; advance pointer
        (not (current-day ?d)) (current-day ?dn)
        ;; remember last-day types
        (prev-first-type  ?tf)
        (prev-second-type ?ts)
        ;; initialise next day
        (needs-first ?dn)
    )
  )

  ;; ────────────────────────────────────────────────────────────────
  ;;  FINISH THE WEEK (Friday)
  ;; ────────────────────────────────────────────────────────────────
  (:action finish-planning
    :parameters (?d  - dia ?pf - primer ?ps - segundo)
    :precondition (and
        (current-day ?d)
        (assigned-first ?d ?pf)
        (assigned-second ?d ?ps)
        ;; Friday has no successor
        (forall (?x - dia) (not (next-day ?d ?x)))
    )
    :effect (and
        (planning-done)
        (not (current-day ?d))
    )
  )
)

========================================

----- domain/domain_metric.pddl -----
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  WEEKLY-MENU ― METRIC DOMAIN  (ext.4-5)
;;  – Adds numeric fluents & optimisation –                       
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (domain weekly-menu-metric)
  (:requirements :adl :typing :equality :fluents)

  ;;-------------------------------------------------------------------
  ;;  TYPES
  ;;-------------------------------------------------------------------
  (:types dia tipo plato primer - plato segundo - plato)

  ;;-------------------------------------------------------------------
  ;;  NUMERIC FLUENTS
  ;;-------------------------------------------------------------------
  (:functions
      (calories ?p - plato)          ; static per dish
      (price    ?p - plato)          ; static per dish
      (current-calories)             ; running total for the day
      (total-cost)                   ; optimisation target (ext-5)
  )

  ;;-------------------------------------------------------------------
  ;;  PREDICATES  (same semantics as basic domain)
  ;;-------------------------------------------------------------------
  (:predicates
      (dish-type        ?p - plato ?t - tipo)
      (incompatible     ?p - primer ?s - segundo)
      (next-day         ?d - dia    ?d2 - dia)

      (current-day      ?d - dia)
      (needs-first      ?d - dia)
      (needs-second     ?d - dia)

      (assigned-first   ?d - dia ?p - primer)
      (assigned-second  ?d - dia ?s - segundo)
      (used             ?pl - plato)

      (prev-first-type  ?t - tipo)
      (prev-second-type ?t - tipo)

      (require-first    ?d - dia ?p - primer)
      (require-second   ?d - dia ?s - segundo)

      (planning-done)
  )

  ;;-------------------------------------------------------------------
  ;;  ACTIONS  (identical control-flow, with numeric effects)
  ;;-------------------------------------------------------------------

  (:action choose-first-free
    :parameters (?p  - primer ?d - dia ?t - tipo ?tp - tipo)
    :precondition (and
        (current-day ?d) (needs-first ?d)
        (dish-type ?p ?t) (prev-first-type ?tp)
        (not (= ?t ?tp)) (not (used ?p))
        (forall (?r - primer) (not (require-first ?d ?r)))
    )
    :effect (and
        (increase (current-calories) (calories ?p))
        (increase (total-cost)       (price    ?p))
        (assigned-first ?d ?p)
        (not (needs-first ?d)) (needs-second ?d)
        (used ?p)
    )
  )

  (:action choose-first-required
    :parameters (?p - primer ?d - dia ?t - tipo ?tp - tipo)
    :precondition (and
        (current-day ?d) (needs-first ?d)
        (dish-type ?p ?t) (prev-first-type ?tp)
        (not (= ?t ?tp)) (not (used ?p))
        (require-first ?d ?p)
    )
    :effect (and
        (increase (current-calories) (calories ?p))
        (increase (total-cost)       (price    ?p))
        (assigned-first ?d ?p)
        (not (needs-first ?d)) (needs-second ?d)
        (used ?p)
    )
  )

  (:action choose-second-free
    :parameters (?s - segundo ?d - dia ?pf - primer)
    :precondition (and
        (current-day ?d) (needs-second ?d)
        (assigned-first ?d ?pf)
        (not (incompatible ?pf ?s))
        (not (used ?s))
        (forall (?r - segundo) (not (require-second ?d ?r)))
    )
    :effect (and
        (increase (current-calories) (calories ?s))
        (increase (total-cost)       (price    ?s))
        (assigned-second ?d ?s)
        (not (needs-second ?d))
        (used ?s)
    )
  )

  (:action choose-second-required
    :parameters (?s - segundo ?d - dia ?pf - primer)
    :precondition (and
        (current-day ?d) (needs-second ?d)
        (assigned-first ?d ?pf)
        (not (incompatible ?pf ?s))
        (not (used ?s))
        (require-second ?d ?s)
    )
    :effect (and
        (increase (current-calories) (calories ?s))
        (increase (total-cost)       (price    ?s))
        (assigned-second ?d ?s)
        (not (needs-second ?d))
        (used ?s)
    )
  )

  (:action finalize-day
    :parameters (?d  - dia  ?dn - dia
                 ?pf - primer ?ps - segundo
                 ?tf - tipo   ?ts - tipo)
    :precondition (and
        (current-day ?d)
        (assigned-first  ?d ?pf) (dish-type ?pf ?tf)
        (assigned-second ?d ?ps) (dish-type ?ps ?ts)
        (next-day ?d ?dn)
        ;; ext-4: daily calories in range
        (>= (current-calories) 1000)
        (<= (current-calories) 1500)
    )
    :effect (and
        (assign (current-calories) 0)
        (not (current-day ?d)) (current-day ?dn)
        (prev-first-type  ?tf)
        (prev-second-type ?ts)
        (needs-first ?dn)
    )
  )

  (:action finish-planning
    :parameters (?d - dia ?pf - primer ?ps - segundo)
    :precondition (and
        (current-day ?d)
        (assigned-first  ?d ?pf)
        (assigned-second ?d ?ps)
        (forall (?x - dia) (not (next-day ?d ?x)))
        (>= (current-calories) 1000)
        (<= (current-calories) 1500)
    )
    :effect (and
        (planning-done)
        (not (current-day ?d))
    )
  )
)

========================================

----- problems/basic/menu-test1.pddl -----
(define (problem menu-test1)
  (:domain weekly-menu)

  ;;── 1. Objects ──────────────────────────────────────────────
  (:objects
     ;; weekdays
     lun mar mie jue vie                       - dia

     ;; dish categories
     ensalada crema sopa carne pescado         - tipo

     ;; first-course dishes
     ensaladaverano cremaagur paellavalencia   - primer

     ;; second-course dishes
     fabada asturiansalmon                     - segundo
  )

  ;;── 2. Initial state ───────────────────────────────────────
  (:init
    ;; successor relation among days
    (next-day lun mar) (next-day mar mie)
    (next-day mie jue) (next-day jue vie)

    ;; dish-type facts
    (dish-type ensaladaverano ensalada)
    (dish-type cremaagur      crema)
    (dish-type paellavalencia sopa)
    (dish-type fabada         carne)
    (dish-type asturiansalmon pescado)

    ;; incompatibility example
    (incompatible paellavalencia asturiansalmon)

    ;; seed the “previous first‐type” so choose-first-free can fire on Monday
    (prev-first-type crema)

    ;; start planning: Monday needs its first course
    (current-day lun)
    (needs-first  lun)

    ;; queue the other weekdays (they’ll only be “activated” when you finalize each day)
    (needs-first  mar) (needs-first  mie)
    (needs-first  jue) (needs-first  vie)
  )

  ;;── 3. Goal ────────────────────────────────────────────────
  (:goal (planning-done))
)

========================================

